#version 430

////***** begin interface of surface.glsl ***********************************
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
////***** end interface of surface.glsl ***********************************

layout (binding = 0) uniform sampler2D albedo_tex;
layout (binding = 1) uniform sampler2D position_tex;
layout (binding = 2) uniform sampler2D normal_tex;
layout (binding = 3) uniform sampler2D texcoord_tex;
layout (binding = 4) uniform sampler2D depth_tex;
layout (binding = 5) uniform sampler2D test_tex;

//uniform vec3 background_color;

uniform bool use_gamma = false;

in vec2 texcoord_fs;

out vec4 frag_color;

void main()
{
	vec4 color = vec4(texture(albedo_tex, texcoord_fs).rgb, 1.0);
	vec3 pos_eye = texture(position_tex, texcoord_fs).xyz;
	vec3 normal_value = texture(normal_tex, texcoord_fs).xyz;
	vec3 normal_eye = 2.0 * normal_value - 1.0;
	vec2 texcoord = texture(texcoord_tex, texcoord_fs).rg;
	vec3 tex_color = texture(test_tex, texcoord).rgb;
	
	//frag_color = vec4(vec3(color.rgb), 1.0);

	if(normal_value.x + normal_value.y + normal_value.z < 0.00001f) {
		//finish_fragment(vec4(background_color, 1.0));
		vec3 background_color = vec3(0.0);
		frag_color = vec4(background_color, 1.0);
	} else {
		frag_color = vec4(tex_color, 1.0);//compute_reflected_appearance(pos_eye, normal_eye, color, 1);
	}

	//frag_color = texture(albedo_tex, texcoord_fs);
	//frag_color = texture(position_tex, texcoord_fs);
	//frag_color = texture(normal_tex, texcoord_fs);
	//frag_color = texture(texcoord_tex, texcoord_fs);
	
	//frag_color.rgb = frag_color.rgb + frag_color.a * pow(background_color, vec3(2.2));
	//frag_color.a = 1.0;
	//if(use_gamma)
	//	frag_color.rgb = pow(frag_color.rgb, vec3(2.2));
	
	//frag_color = texture(depth_tex, texcoord_fs).rrrr;

	// write the frag depth to enable the framework view to work properly
	gl_FragDepth = texture(depth_tex, texcoord_fs).r;
}