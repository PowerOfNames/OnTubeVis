#version 430

layout (binding = 0) uniform sampler2D color_curr_tex;
layout (binding = 1) uniform sampler2D color_prev_tex;
layout (binding = 2) uniform sampler2D depth_tex;

layout (binding = 3) uniform sampler2D pos_prev_tex;
layout (binding = 4) uniform sampler2D pos_curr_tex;

uniform float alpha;

in vec2 texcoord_fs;

out vec4 frag_color;

void main()
{
	

	vec3 pp = texture(pos_prev_tex, texcoord_fs).xyz;
	vec3 pc = texture(pos_curr_tex, texcoord_fs).xyz;
	pp.xy = 0.5*pp.xy + 0.5;
	//pc.xy = 0.5*pc.xy + 0.5;
	vec2 vel = (pc - pp).xy;
	
	/*if(isnan(vel.x) || isnan(vel.y))
		vel = vec2(0.0);
	if(isinf(vel.x) || isinf(vel.y))
		vel = vec2(0.0);

	if(pp.xy == vec2(0.0) || pc.xy == vec2(0.0))
		vel = vec2(0.0);
		*/


	vec4 color_curr = texture(color_curr_tex, texcoord_fs);
	vec4 color_prev = texture(color_prev_tex, texcoord_fs - vel);
	float depth = texture(depth_tex, texcoord_fs).r;



	/*ivec2 size = textureSize(color_tex, 0);

	vec2 offset = 1.0 / vec2(size);

	color += texture(color_tex, texcoord_fs + vec2(offset.x, 0.0));
	color += texture(color_tex, texcoord_fs + vec2(-offset.x, 0.0));
	color += texture(color_tex, texcoord_fs + vec2(0.0, offset.y));
	color += texture(color_tex, texcoord_fs + vec2(0.0, -offset.y));

	color *= 0.2;*/

	frag_color = mix(color_prev, color_curr, alpha);// * vec4(1.0, 0.0, 0.0, 1.0);

	frag_color = vec4(pp.xy, 0.0, 1.0);
	
	
	/*if(depth == 1.0) {
		frag_color = vec4(vec3(0.0), 1.0);
	} else {
		frag_color = 1.0 - color * vec4(1.0, 0.0, 1.0, 1.0);
		//frag_color.rgb = pow(frag_color.rgb, vec3(2.2));
	}*/

	// write the frag depth to enable the framework view to work properly
	gl_FragDepth = depth;
}
