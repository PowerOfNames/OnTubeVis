#version 430

layout (binding = 0) uniform sampler2D color_tex;

uniform vec2 inverse_viewport_size;
uniform float mix_factor = 1.0;

in vec2 texcoord_fs;

out layout(location = 0) vec4 frag_color;

// ported version of https://github.com/mattdesl/glsl-fxaa
#ifndef FXAA_REDUCE_MIN
    #define FXAA_REDUCE_MIN   (1.0/ 128.0)
#endif
#ifndef FXAA_REDUCE_MUL
    #define FXAA_REDUCE_MUL   (1.0 / 8.0)
#endif
#ifndef FXAA_SPAN_MAX
    #define FXAA_SPAN_MAX     8.0
#endif

vec4 fxaa(in vec4 src_color) {
    vec4 color;

    vec3 rgbNW = textureOffset(color_tex, texcoord_fs, ivec2(-1.0, -1.0)).rgb;
    vec3 rgbNE = textureOffset(color_tex, texcoord_fs, ivec2(+1.0, -1.0)).rgb;
    vec3 rgbSW = textureOffset(color_tex, texcoord_fs, ivec2(-1.0, +1.0)).rgb;
    vec3 rgbSE = textureOffset(color_tex, texcoord_fs, ivec2(+1.0, +1.0)).rgb;
    
    vec3 rgbM = src_color.rgb;
    const vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    mediump vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
              dir * rcpDirMin)) * inverse_viewport_size;
    
    vec3 rgbA = 0.5 * (
        texture(color_tex, texcoord_fs + dir * (1.0 / 3.0 - 0.5)).rgb +
        texture(color_tex, texcoord_fs + dir * (2.0 / 3.0 - 0.5)).rgb);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        texture(color_tex, texcoord_fs + dir * -0.5).rgb +
        texture(color_tex, texcoord_fs + dir * 0.5).rgb);

    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
        color = vec4(rgbA, src_color.a);
    else
        color = vec4(rgbB, src_color.a);
    return color;
}

void main() {

	vec4 color = texture(color_tex, texcoord_fs);
	frag_color = clamp(mix(color, fxaa(color), mix_factor), 0.0, 1.0);
}
